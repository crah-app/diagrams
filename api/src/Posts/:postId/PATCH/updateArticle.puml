@startuml updateArticle-Request
!theme toy
skinparam linetype ortho
title "updateArticle /api/posts/:postId PATCH Request"

package "postUpdate.zip" {
    
    ' Optional (cover replacement)
    file "postId-cover.png"
    
    note left of "postId-cover.png" 
        Optional
    end note

    ' Optional (new image)
    file "post-image-4.png"
    ' Optional (new image)
    file "post-image-5.jpg"
    
    note left of "post-image-4.png" 
        Optional: new image
    end note
    
    json "postUpdate.json" {
        ' Optional
        "title": "",
        ' Optional
        "description": "",
        ' Optional
        "content": "",
        ' Optional
        ' If omitted, no changes are made.
        ' If present, adds the new ones and removes all the missing ones
        "tags": [],
        ' Optional
        ' If omitted, no changes are made.
        ' If present, adds the new ones and removes all the missing ones
        "partecipants": [
            {
                ' Optional
                "role": "",
                "userId": ""
            }
        ]
    }

    note bottom of "postUpdate.json" 
        Optional fields: **title**, **description**, **content**, **tags**, **partecipants**
    end note
    
    note right of "postUpdate.json" 
        Certain optional fields should contain full information if present.
        e.g if the **tags** field exist, the new tags will be added,
        and the missing ones will be removed.
    end note

    note top of "postUpdate.json" 
        For every new image, the **imageIdsCounter** is updated on the server.
        
        TODO: **imageIdsSequence** is missing in the request because images are linked in the
        markdown file? How about deleting the missing ones like we do in updatePhoto?
    end note
}

json Auth {
    "sub": "",
    "iat": "",
    "exp": ""
}

"postUpdate.zip" --* Auth
@enduml
@startuml updateArticle-Response
!theme toy
skinparam linetype ortho
title "updateArticle /api/posts/:postId PATCH Response"
@enduml
